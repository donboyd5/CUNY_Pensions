---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Data preparation that will be used in other files

```{r}
#| label: setup
#| eval: true
#| include: false
#| echo: false

source(here::here("r", "libraries.r"))

library(bea.R)
beakey <- "21F782AD-56A6-439D-B3D5-9A592F020E26"

fstabbr <- function(stname){
  factor(stname,
         levels=c("United States",
                  state.name,
                  "District of Columbia"),
         labels=c("US", state.abb, "DC"))
}

# data(package="fof")
# glimpse(fofdict_all)

```

## BEA discount rates

See the [July 2020 SCB article](https://apps.bea.gov/scb/issues/2020/07-july/0720-state-pension-estimates.htm) ([pdf](https://apps.bea.gov/scb/issues/2020/07-july/pdf/0720-state-pension-estimates.pdf)).

The discount rate was 6 percent for 2000 to 2003, 5.5 percent for 2004 to 2009, 5 percent for 2010 to 2012, and 4 percent from 2013 to 2018 (table 2).

![](images/ScreenHunter_3067%20Jun.%2025%2006.45.png){width="720" height="152"}

From p.10-10 of:

U.S. Bureau of Economic Analysis (BEA). "NIPA Handbook: Concepts and Methods of the U.S. National Income and Product Accounts." U.S. Bureau of Economic Analysis (BEA), December 2022. <https://www.bea.gov/resources/methodologies/nipa-handbook>.

> For privately sponsored defined benefit plans, estimates of employers' normal costs are based on actuarial estimates of employers' normal costs provided by the PBGC from data collected on IRS form 5500. The PBGC adjusts the estimates to include administrative expenses, and BEA adjusts the PBGC estimates to reflect a common discount rate based on the **average AAA corporate bond rate published by Moody's** Investors Service.
>
> ...
>
> For state and local employee defined benefit pension plans, the estimates of employers' normal costs are based on the service costs and employee contribution data reported in state and local government financial reports. BEA adjusts the estimates to reflect the **same discount rate that is used for measures of privately sponsored defined benefit plans**. Separate measures of administrative expenses are based on Census Bureau data.

Also see the [summary of methodologies](https://apps.bea.gov/scb/issues/2022/11-november/pdf/1122-nipa-methodologies.pdf).

```{r}

df <- readRDS(here::here("beameeting", "rates_a.rds"))
glimpse(df)
count(df, series)
df |> filter(series=="beadr")

#   series  year value
#    <chr>  <dbl> <dbl>
#  1 beadr   2000   6  
#  2 beadr   2001   6  
#  3 beadr   2002   6  
#  4 beadr   2003   6  
#  5 beadr   2004   5.5
#  6 beadr   2005   5.5
#  7 beadr   2006   5.5
#  8 beadr   2007   5.5
#  9 beadr   2008   5.5
# 10 beadr   2009   5.5
# 11 beadr   2010   5  
# 12 beadr   2011   5  
# 13 beadr   2012   5  
# 14 beadr   2013   4  
# 15 beadr   2014   4  
# 16 beadr   2015   4  
# 17 beadr   2016   4  
# 18 beadr   2017   4  
# 19 beadr   2018   4  



```

## Flow of funds

This section maps selected Flow of Funds variable names to names I use in other parts of this program.

```{r}
#| label: fof-map
#| eval: true
#| include: true
#| echo: false

vnames <- vroom(I("
# general_variables
FA216210001, other_slgperscurtax
FA216240001, other_slgprodimptax
FA216231001, other_slgcorptax
FA086902005, other_gdp
FL213162005, other_munisec
FL213162400, other_stdebt
FL214090005, other_slgfinass
FL214190005, other_slgfinliab
LM653064100, other_mfcorpequity
LM654090000, other_mfassets

# private_DB_pension_funds
FL574090045, ppfdb_finassets
FL573065043, ppfdb_mortgages
LM573064143, ppfdb_corpequity
LM573064243, ppfdb_mfshares
FL573073005, ppfdb_claims
FL573093043, ppfdb_otherassets
FL574190043, ppfdb_entitlement

# SLG_DB_funds
FL224090045, slgdb_finassets
FL223065043, slgdb_mortgages
LM223064145, slgdb_corpequity
LM223064243, slgdb_mfshares
FL223073045, slgdb_claims
LM223093043, slgdb_otherassets
FL224190043, slgdb_entitlement
"), delim=",", comment="#", col_names=c("snamex", "shortname"))
vnames

```

```{r}
#| label: fof-data
#| eval: false
#| include: false
#| echo: false

df <- fof |> 
  right_join(vnames |> 
               mutate(name=paste0(snamex, ".Q")) |> 
               select(name, shortname),
             by = join_by(name))
count(df, shortname)
saveRDS(df, here::here("data", "fofextract.rds"))

```

## State and local retirement funds, by state, from the FRB

See:

-   https://www.federalreserve.gov/releases/z1/dataviz/pension/

-   https://www.federalreserve.gov/releases/z1/dataviz/download/zips/efa-state-pension-tables-annual-historical.zip


```{r}
#| label: frb-states
#| eval: false
#| include: false
#| echo: false

url <- "https://www.federalreserve.gov/releases/z1/dataviz/download/zips/efa-state-pension-tables-annual-historical.zip"

temp <- tempfile()
download.file(url, temp, mode="wb")

# dir_ls(temp)
(flist <- unzip(zipfile = temp, list = TRUE))
(fn <- flist$Name[1])

df1 <- read_csv(unz(temp, fn),
                col_types = cols(.default=col_character()))
glimpse(df1)
names(df1)
count(df1, Region)

df2 <- df1 |> 
  select(year=Date, stname=Region, everything()) |> 
  mutate(year=as.integer(year), stabbr=fstabbr(stname)) |> 
  pivot_longer(-c(year, stabbr, stname),
               names_to = "description") |> 
  mutate(vname=case_when(str_detect(description, "Pension assets") ~ "assets",
                         str_detect(description, "Pension liabilities") ~ "liab",
                         str_detect(description, coll("Funding status (millions)")) ~ "ufl",
                         str_detect(description, "Assets as a percent") ~ "frpct",
                         str_detect(description, "percent of state GDP") ~ "pctgdp",
                         str_detect(description, "percent of state revenue") ~ "pctstrev",
                         TRUE ~ NA_character_),
         value=as.numeric(value),
         value=ifelse(str_detect(description, "percent"), value / 100, value)) |> 
  select(year, stabbr, stname, vname, description, value)
names(df1)
glimpse(df2)
count(df2, stabbr, stname)  
count(df2, description, vname)

saveRDS(df2, here::here("data", "stlpensions_frb.rds"))

```

```{r}
#| label: frb-states-show
#| eval: false
#| include: false
#| echo: false
#| df-print: paged

stpen <- readRDS(here::here("data", "stlpensions_frb.rds"))
count(stpen, vname, description)

```

## State and local retirement funds, from BEA

BEA API key: 21F782AD-56A6-439D-B3D5-9A592F020E26

https://apps.bea.gov/itable/?ReqID=70&step=1#eyJhcHBpZCI6NzAsInN0ZXBzIjpbMSwyNCwyOSwyNSwzMSwyNl0sImRhdGEiOltbIlRhYmxlSWQiLCI4MyJdLFsiQ2xhc3NpZmljYXRpb24iLCJOb24tSW5kdXN0cnkiXSxbIk1ham9yX0FyZWEiLCIwIl0sWyJTdGF0ZSIsWyIwIl1dXX0=

Regional data GDP and personal income SAINC70 Transactions of state and local government defined benefit pension plans

See this: https://jwrchoi.com/post/how-to-use-bureau-of-economic-analysis-bea-api-in-r/

```{r}
#| label: bea-data
#| eval: false
#| include: false
#| echo: false

nipaparms <- beaParams(beakey, "NIPA")
tablecode <- beaParamVals(beaKey = beakey, setName="NIPA", paramName="TableID")$ParamValue

rparms <- beaParams(beakey, "Regional")
linecode <- beaParamVals(beaKey = beakey, "Regional", "LineCode")$ParamValue |> 
  as_tibble() |> 
  lcnames()

tmp <- beaParamVals(beaKey = beakey, "Regional", "LineCode")


## SAGDP1 State annual gross domestic product (GDP) summary ----
gdpcodes <- linecode |> 
  filter(str_detect(desc, "SAGDP1]")) |> 
  distinct() |> 
  mutate(key=as.integer(key)) |> 
  arrange(key)

specs <- list(
  UserID = beakey,
  Method = "GetData",
  datasetname = "Regional",
  TableName = "SAGDP1",
  LineCode = "3", # nominal state gdp
  GeoFips = "STATE", # geographic level
  Year = 'ALL')

df <- beaGet(specs, asWide = FALSE)

sgdp <- df |>
  lcnames() |> 
  rename(year=timeperiod, clunit=cl_unit, mult=unit_mult, gdp=datavalue) |> 
  mutate(stabbr=fstabbr(geoname),
         year=as.integer(year)) |> 
  select(stabbr, geofips, geoname, year, gdp) |> 
  arrange(geofips, year) |> 
  as_tibble()
saveRDS(sgdp, here::here("data", "sgdp.rds"))

## Table 7.24. Transactions of State and Local Government Defined Benefit Pension Plans ----
# https://apps.bea.gov/iTable/?reqid=19&step=2&isuri=1&categories=survey#eyJhcHBpZCI6MTksInN0ZXBzIjpbMSwyLDNdLCJkYXRhIjpbWyJjYXRlZ29yaWVzIiwiU3VydmV5Il0sWyJOSVBBX1RhYmxlX0xpc3QiLCIzOTUiXV19

nipaparms

glimpse(tablecode)

tablecode |> 
  filter(str_detect(Description, "7.24")) # T72400

specs <- list(
  UserID = beakey,
  Method = "GetData",
  datasetname = "NIPA",
  TableName = "T72400",
  Frequency = "A",
  Year = "ALL")

df <- beaGet(specs, asWide = FALSE)
glimpse(df)
count(df, TimePeriod) |> ht() # 1929-2021
count(df, METRIC_NAME) # Current Dollars
count(df, CL_UNIT)# Level 
count(df, UNIT_MULT) # 6  (i.e., millions)
count(df, NoteRef) # notes 1-5, don't think we need this

count(df |> filter(NoteRef=="T72400,T72400.1"), LineDescription) # Less: Pension service charges, Output
count(df |> filter(NoteRef=="T72400,T72400.2"), LineDescription) # Household pension contribution supplements
count(df |> filter(NoteRef=="T72400,T72400.3"), LineDescription) # Imputed interest on plans' claims on employers
count(df |> filter(NoteRef=="T72400,T72400.4"), LineDescription) # Net change in benefit entitlements
count(df |> filter(NoteRef=="T72400,T72400.5"), LineDescription) # Equals: Change in benefit entitlements...,
# Equals: Change in personal wealth

df2 <- df |> 
  select(series=SeriesCode,
         line=LineNumber,
         desc=LineDescription,
         year=TimePeriod,
         value=DataValue) |> 
  mutate(line=as.integer(line),
         year=as.integer(year)) |> 
  as_tibble()
glimpse(df2)
skim(df2)

saveRDS(df2, here::here("data", "tab7.24.rds"))

## Table 1.1.5. Gross Domestic Product ----

nipaparms

glimpse(tablecode)

tablecode |> 
  filter(str_detect(Description, "1.1.5")) # T10105

specs <- list(
  UserID = beakey,
  Method = "GetData",
  datasetname = "NIPA",
  TableName = "T10105",
  Frequency = "A",
  Year = "ALL")

df <- beaGet(specs, asWide = FALSE)
glimpse(df)
count(df, TimePeriod) |> ht() # 1929-2021
count(df, METRIC_NAME) # Current Dollars
count(df, CL_UNIT)# Level 
count(df, UNIT_MULT) # 6  (i.e., millions)
count(df, NoteRef) # T10105

df2 <- df |> 
  select(series=SeriesCode,
         line=LineNumber,
         desc=LineDescription,
         year=TimePeriod,
         value=DataValue) |> 
  mutate(line=as.integer(line),
         year=as.integer(year)) |> 
  as_tibble()
glimpse(df2)
skim(df2)

saveRDS(df2, here::here("data", "tab1.1.5gdp.rds"))


```


```{r}
#| label: bea-stlpensions
#| eval: false
#| include: false
#| echo: false

rparms <- beaParams(beakey, "Regional")

linecode <- beaParamVals(beaKey = beakey, "Regional", "LineCode")$ParamValue |> 
  as_tibble() |> 
  lcnames()

tmp <- beaParamVals(beaKey = beakey, "Regional", "LineCode")

## SAINC70 Transactions of state and local government defined benefit pension plans ----

pencodes <- linecode |> 
  filter(str_detect(desc, "SAINC70")) |> 
  distinct() |> 
  mutate(key=as.integer(key)) |> 
  arrange(key)

pencodes$key

f <- function(key){
  specs <- list(
    UserID = beakey,
    Method = "GetData",
    datasetname = "Regional",
    TableName = "SAINC70",
    LineCode = as.character(key),
    GeoFips = "STATE", # geographic level
    Year = 'ALL')
  
  beaGet(specs, asWide = FALSE) |> 
    mutate(line=key)
  }

df <- purrr::map(1:32, f, .progress = TRUE) |> list_rbind()

df2 <- df |> 
  lcnames() |> 
  rename(year=timeperiod, clunit=cl_unit, mult=unit_mult, value=datavalue) |>
  left_join(pencodes |> rename(line=key),
            by = join_by(line)) |> 
  mutate(stabbr=fstabbr(geoname),
         year=as.integer(year),
         table="SAINC70",
         desc=str_remove(desc, coll("[SAINC70] "))) |> 
  select(stabbr, geofips, geoname, table, line, desc, clunit, year, value) |> 
  arrange(geofips, table, line, year) |>
  as_tibble()
glimpse(df2)
skim(df2)
count(df2, line, desc)
count(df2, stabbr, geofips, geoname)

## create mapping of variable names to line numbers ----
vmap <- read_csv("
vname, line, desc
crab,  1, Current receipts accrual basis
crabo, 2, Current receipts accrual basis: Output
crabc, 3, Current receipts accrual basis: Contributions
contrib, 4, Contributions: Claims to benefits accrued through service to employers
aec, 5, Claims to benefits accrued through service to employers: Actual employer contributions
iec, 6, Claims to benefits accrued through service to employers: Imputed employer contributions
ahc, 7, Claims to benefits accrued through service to employers: Actual household contributions
psc, 8, Claims to benefits accrued through service to employers: Less: Pension service charges
hpcsupp, 9, Contributions: Household pension contribution supplements
crabira, 10, Current receipts accrual basis: Income receipts on assets (including plans' claims on employers)
irai, 11, Income receipts on assets (including plans' claims on employers): Interest
mi, 12, Monetary interest
iipce, 13, Imputed interest on plans' claims on employers
div, 14, Income receipts on assets (including plans' claims on employers): Dividends
cxab, 15, Current expenditures accrual basis
cxabadmin, 16, Current expenditures accrual basis: Administrative expenses
cxabiipay, 17, Current expenditures accrual basis: Imputed income payments on assets to persons
iipaint, 18, Imputed income payments on assets to persons: Interest
iipadiv, 19, Imputed income payments on assets to persons: Dividends
cxabben, 20, Current expenditures accrual basis: Benefit payments and withdrawals
cxabbenchg, 21, Current expenditures accrual basis: Net change in benefit entitlements
cashflow, 22, Cash flow
cashflowaehc, 23, Cash flow: Actual employer and household contributions
cashflowmi, 24, Cash flow: Monetary income receipts on assets
ben, 25, Cash flow: Less: Benefit payments and withdrawals
cashflowadmin, 26, Cash flow: Less: Administrative expenses
enc, 27, Employers' normal cost
iabe, 28, Interest accrued on benefit entitlements
liabeoy, 29, Benefit entitlements
ass, 30, Pension plan assets
claims, 31, Plans' claims on employers
fr, 32, Funded ratio
")
# problems(vmap)
vmap



df3 <- df2 |> 
  # filter(!is.na(stabbr)) |> 
  select(table, stabbr, line, desc, year, value) |> 
  left_join(vmap |> select(line, vname, descv=desc),
            by = join_by(line))
count(df3, desc, descv)

df4 <- df3 |> 
  select(-descv)


saveRDS(df4, here::here("data", "stlpensions_bea.rds"))

```


```{r}
#| label: bea-show
#| eval: false
#| include: false
#| echo: false

pen <- readRDS(here::here("data", "stlpensions_bea.rds"))
sgdp <- readRDS(here::here("data", "sgdp.rds"))

sts <- c("NY", "US", "CA", "IL", "CT")
year1 <- 2007
pen |> 
  filter(stabbr %in% sts, line==5, year %in% year1:max(year)) |> 
  mutate(ierc=value / value[year==year1], .by=stabbr) |>
  ggplot(aes(year, ierc, colour=stabbr)) +
  geom_line() +
  geom_point()
count(pen, line, desc)

glimpse(pen)
glimpse(sgdp)

df <- pen |> 
  filter(stabbr %in% c(state.abb, "US"), line==5) |> 
  select(stabbr, year, erc=value) |> 
  left_join(sgdp |> select(stabbr, year, gdp),
            by = join_by(stabbr, year)) |> 
  mutate(erc=erc / 1000) # $ millions
         

df |> 
  mutate(ercpct=erc / gdp) |> 
  filter(year==2021) |> 
  arrange(desc(ercpct))

df |> 
  mutate(ercpct=erc / gdp) |>
  filter(stabbr %in% c("IL", "CT", "CA", "OR", "RI", "NJ", "US")) |> 
  ggplot(aes(year, ercpct, colour=stabbr)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(limits=c(0, .017))

```

